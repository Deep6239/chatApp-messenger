"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@next-auth";
exports.ids = ["vendor-chunks/@next-auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/@next-auth/upstash-redis-adapter/dist/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@next-auth/upstash-redis-adapter/dist/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UpstashRedisAdapter = exports.hydrateDates = exports.defaultOptions = void 0;\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nexports.defaultOptions = {\n    baseKeyPrefix: \"\",\n    accountKeyPrefix: \"user:account:\",\n    accountByUserIdPrefix: \"user:account:by-user-id:\",\n    emailKeyPrefix: \"user:email:\",\n    sessionKeyPrefix: \"user:session:\",\n    sessionByUserIdKeyPrefix: \"user:session:by-user-id:\",\n    userKeyPrefix: \"user:\",\n    verificationTokenKeyPrefix: \"user:token:\"\n};\nconst isoDateRE = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/;\nfunction isDate(value) {\n    return value && isoDateRE.test(value) && !isNaN(Date.parse(value));\n}\nfunction hydrateDates(json) {\n    return Object.entries(json).reduce((acc, [key, val])=>{\n        acc[key] = isDate(val) ? new Date(val) : val;\n        return acc;\n    }, {});\n}\nexports.hydrateDates = hydrateDates;\nfunction UpstashRedisAdapter(client, options = {}) {\n    const mergedOptions = {\n        ...exports.defaultOptions,\n        ...options\n    };\n    const { baseKeyPrefix } = mergedOptions;\n    const accountKeyPrefix = baseKeyPrefix + mergedOptions.accountKeyPrefix;\n    const accountByUserIdPrefix = baseKeyPrefix + mergedOptions.accountByUserIdPrefix;\n    const emailKeyPrefix = baseKeyPrefix + mergedOptions.emailKeyPrefix;\n    const sessionKeyPrefix = baseKeyPrefix + mergedOptions.sessionKeyPrefix;\n    const sessionByUserIdKeyPrefix = baseKeyPrefix + mergedOptions.sessionByUserIdKeyPrefix;\n    const userKeyPrefix = baseKeyPrefix + mergedOptions.userKeyPrefix;\n    const verificationTokenKeyPrefix = baseKeyPrefix + mergedOptions.verificationTokenKeyPrefix;\n    const setObjectAsJson = async (key, obj)=>await client.set(key, JSON.stringify(obj));\n    const setAccount = async (id, account)=>{\n        const accountKey = accountKeyPrefix + id;\n        await setObjectAsJson(accountKey, account);\n        await client.set(accountByUserIdPrefix + account.userId, accountKey);\n        return account;\n    };\n    const getAccount = async (id)=>{\n        const account = await client.get(accountKeyPrefix + id);\n        if (!account) return null;\n        return hydrateDates(account);\n    };\n    const setSession = async (id, session)=>{\n        const sessionKey = sessionKeyPrefix + id;\n        await setObjectAsJson(sessionKey, session);\n        await client.set(sessionByUserIdKeyPrefix + session.userId, sessionKey);\n        return session;\n    };\n    const getSession = async (id)=>{\n        const session = await client.get(sessionKeyPrefix + id);\n        if (!session) return null;\n        return hydrateDates(session);\n    };\n    const setUser = async (id, user)=>{\n        await setObjectAsJson(userKeyPrefix + id, user);\n        await client.set(`${emailKeyPrefix}${user.email}`, id);\n        return user;\n    };\n    const getUser = async (id)=>{\n        const user = await client.get(userKeyPrefix + id);\n        if (!user) return null;\n        return hydrateDates(user);\n    };\n    return {\n        async createUser (user) {\n            const id = (0, uuid_1.v4)();\n            // TypeScript thinks the emailVerified field is missing\n            // but all fields are copied directly from user, so it's there\n            return await setUser(id, {\n                ...user,\n                id\n            });\n        },\n        getUser,\n        async getUserByEmail (email) {\n            const userId = await client.get(emailKeyPrefix + email);\n            if (!userId) {\n                return null;\n            }\n            return await getUser(userId);\n        },\n        async getUserByAccount (account) {\n            const dbAccount = await getAccount(`${account.provider}:${account.providerAccountId}`);\n            if (!dbAccount) return null;\n            return await getUser(dbAccount.userId);\n        },\n        async updateUser (updates) {\n            const userId = updates.id;\n            const user = await getUser(userId);\n            return await setUser(userId, {\n                ...user,\n                ...updates\n            });\n        },\n        async linkAccount (account) {\n            const id = `${account.provider}:${account.providerAccountId}`;\n            return await setAccount(id, {\n                ...account,\n                id\n            });\n        },\n        createSession: (session)=>setSession(session.sessionToken, session),\n        async getSessionAndUser (sessionToken) {\n            const session = await getSession(sessionToken);\n            if (!session) return null;\n            const user = await getUser(session.userId);\n            if (!user) return null;\n            return {\n                session,\n                user\n            };\n        },\n        async updateSession (updates) {\n            const session = await getSession(updates.sessionToken);\n            if (!session) return null;\n            return await setSession(updates.sessionToken, {\n                ...session,\n                ...updates\n            });\n        },\n        async deleteSession (sessionToken) {\n            await client.del(sessionKeyPrefix + sessionToken);\n        },\n        async createVerificationToken (verificationToken) {\n            await setObjectAsJson(verificationTokenKeyPrefix + verificationToken.identifier + \":\" + verificationToken.token, verificationToken);\n            return verificationToken;\n        },\n        async useVerificationToken (verificationToken) {\n            const tokenKey = verificationTokenKeyPrefix + verificationToken.identifier + \":\" + verificationToken.token;\n            const token = await client.get(tokenKey);\n            if (!token) return null;\n            await client.del(tokenKey);\n            return hydrateDates(token);\n        // return reviveFromJson(token)\n        },\n        async unlinkAccount (account) {\n            const id = `${account.provider}:${account.providerAccountId}`;\n            const dbAccount = await getAccount(id);\n            if (!dbAccount) return;\n            const accountKey = `${accountKeyPrefix}${id}`;\n            await client.del(accountKey, `${accountByUserIdPrefix} + ${dbAccount.userId}`);\n        },\n        async deleteUser (userId) {\n            const user = await getUser(userId);\n            if (!user) return;\n            const accountByUserKey = accountByUserIdPrefix + userId;\n            const accountKey = await client.get(accountByUserKey);\n            const sessionByUserIdKey = sessionByUserIdKeyPrefix + userId;\n            const sessionKey = await client.get(sessionByUserIdKey);\n            await client.del(userKeyPrefix + userId, `${emailKeyPrefix}${user.email}`, accountKey, accountByUserKey, sessionKey, sessionByUserIdKey);\n        }\n    };\n}\nexports.UpstashRedisAdapter = UpstashRedisAdapter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@next-auth/upstash-redis-adapter/dist/index.js\n");

/***/ })

};
;